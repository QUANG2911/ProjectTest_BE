// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectTest.Data;

#nullable disable

namespace ProjectTest.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250102010147_RenameColumnForgeinKey")]
    partial class RenameColumnForgeinKey
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjectTest.Models.Block", b =>
                {
                    b.Property<string>("IdBlock")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("BayType")
                        .HasColumnType("int");

                    b.HasKey("IdBlock");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("ProjectTest.Models.Container", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContainerStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateOfManufacture")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdCustomer")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("IdExitForm")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdTypeContainer")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("MaxWeight")
                        .HasColumnType("int");

                    b.Property<string>("NumContainer")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("SeriContainer")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("TareWeight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdExitForm");

                    b.HasIndex("IdTypeContainer");

                    b.ToTable("Containers");
                });

            modelBuilder.Entity("ProjectTest.Models.ContainerEntryForm", b =>
                {
                    b.Property<string>("IdEntryForm")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("DateOfEntryContainer")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransportEntryLicense")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TransportEntryType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("IdEntryForm");

                    b.HasIndex("Id");

                    b.ToTable("ContainerEntryForms");
                });

            modelBuilder.Entity("ProjectTest.Models.ContainerExitForm", b =>
                {
                    b.Property<string>("IdExitForm")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("DateOfExitContainer")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfRegistration")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransportExitLincese")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TransportType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("IdExitForm");

                    b.ToTable("ContainerExitForms");
                });

            modelBuilder.Entity("ProjectTest.Models.ContainerLocation", b =>
                {
                    b.Property<int>("IdLoctation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLoctation"));

                    b.Property<int>("BayLocation")
                        .HasColumnType("int");

                    b.Property<string>("IdBlock")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("LocationSatus")
                        .HasColumnType("int");

                    b.Property<int>("RowLocation")
                        .HasColumnType("int");

                    b.Property<int>("TierLocation")
                        .HasColumnType("int");

                    b.HasKey("IdLoctation");

                    b.HasIndex("IdBlock");

                    b.ToTable("ContainerLocations");
                });

            modelBuilder.Entity("ProjectTest.Models.ContainerType", b =>
                {
                    b.Property<string>("IdTypeContainer")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("NameTypeContainer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdTypeContainer");

                    b.ToTable("ContainerTypes");
                });

            modelBuilder.Entity("ProjectTest.Models.Customer", b =>
                {
                    b.Property<string>("IdCustomer")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("IdCustomer");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ProjectTest.Models.DetailContainer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("IdLoctation")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.HasKey("Id", "IdLoctation");

                    b.HasIndex("IdLoctation");

                    b.ToTable("ContainerDetails");
                });

            modelBuilder.Entity("ProjectTest.Models.Report", b =>
                {
                    b.Property<int>("stt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("stt"));

                    b.Property<string>("NoiDung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ThoiGianQuery")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("stt");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("ProjectTest.Models.UserAccount", b =>
                {
                    b.Property<int>("Stt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Stt"));

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdCustomer")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("IdStaff")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Stt");

                    b.HasIndex("IdCustomer");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ProjectTest.Models.Container", b =>
                {
                    b.HasOne("ProjectTest.Models.Customer", "Customer")
                        .WithMany("Containers")
                        .HasForeignKey("IdCustomer");

                    b.HasOne("ProjectTest.Models.ContainerExitForm", "ContainerExitForm")
                        .WithMany("Containers")
                        .HasForeignKey("IdExitForm");

                    b.HasOne("ProjectTest.Models.ContainerType", "ContainerType")
                        .WithMany("Containers")
                        .HasForeignKey("IdTypeContainer");

                    b.Navigation("ContainerExitForm");

                    b.Navigation("ContainerType");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ProjectTest.Models.ContainerEntryForm", b =>
                {
                    b.HasOne("ProjectTest.Models.Container", "Container")
                        .WithMany("ContainerEntryForms")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Container");
                });

            modelBuilder.Entity("ProjectTest.Models.ContainerLocation", b =>
                {
                    b.HasOne("ProjectTest.Models.Block", "Blocks")
                        .WithMany("ContainerLocation")
                        .HasForeignKey("IdBlock");

                    b.Navigation("Blocks");
                });

            modelBuilder.Entity("ProjectTest.Models.DetailContainer", b =>
                {
                    b.HasOne("ProjectTest.Models.Container", "Container")
                        .WithMany("DetailContainers")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectTest.Models.ContainerLocation", "ContainerLocation")
                        .WithMany("DetailContainers")
                        .HasForeignKey("IdLoctation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Container");

                    b.Navigation("ContainerLocation");
                });

            modelBuilder.Entity("ProjectTest.Models.UserAccount", b =>
                {
                    b.HasOne("ProjectTest.Models.Customer", "Customer")
                        .WithMany("UserAccounts")
                        .HasForeignKey("IdCustomer");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ProjectTest.Models.Block", b =>
                {
                    b.Navigation("ContainerLocation");
                });

            modelBuilder.Entity("ProjectTest.Models.Container", b =>
                {
                    b.Navigation("ContainerEntryForms");

                    b.Navigation("DetailContainers");
                });

            modelBuilder.Entity("ProjectTest.Models.ContainerExitForm", b =>
                {
                    b.Navigation("Containers");
                });

            modelBuilder.Entity("ProjectTest.Models.ContainerLocation", b =>
                {
                    b.Navigation("DetailContainers");
                });

            modelBuilder.Entity("ProjectTest.Models.ContainerType", b =>
                {
                    b.Navigation("Containers");
                });

            modelBuilder.Entity("ProjectTest.Models.Customer", b =>
                {
                    b.Navigation("Containers");

                    b.Navigation("UserAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
